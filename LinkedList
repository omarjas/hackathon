public class LinkedList<T> {
  private class Node<E>
  {
    private Node<E> next;
    private E data;

    public Node(E data) {
      data = data;
    }

    public void setNext(Node<E> n) {
      next = n;
    }

    public Node<E> next() {
      return next;
    }

    public E getData() {
      return data;
    }
  }

  private int size;
  private Node<T> head;

  public DoublyLinkedList()
  {
    head = new  Node<T>(null);
    size = 0;
  }

  public int size() {
    return size;
  }

  public T get(int index){
    return getNodeAtIndex(index).getData();
  }

  private Node<T> getNodeAtIndex(int index)
   {
       if (index < 0 || size() <= index) {
           throw new IndexOutOfBoundsException("No element exists at "
                   + index);
       }
       Node<T> current = head.next(); // as we have a sentinel node
       for (int i = 0; i < index; i++) {
           current = current.next();
       }
       return current;
   }

  public void add(T newEntry)
  {
      add(size(), newEntry);
  }

  public void add(int index, T obj)
  {
      if (index < 0 || size < index) {
          throw new IndexOutOfBoundsException();
      }
      if (obj == null) {
          throw new IllegalArgumentException("Cannot add null "
                  + "objects to a list");
      }

      Node<T> nodeAfter;
      if (index == size) {
          nodeAfter = tail;
      }
      else {
          nodeAfter = getNodeAtIndex(index);
      }

      Node<T> addition = new Node<T>(obj);
      addition.setPrevious(nodeAfter.previous());
      addition.setNext(nodeAfter);
      nodeAfter.previous().setNext(addition);
      nodeAfter.setPrevious(addition);
      size++;

  }
}
