package creations;

public class LinkedList<T> {
    private class Node<E>
    {
      private Node<E> next;
      private E data;

      public Node(E data) {
        this.data = data;
      }

      public void setNext(Node<E> n) {
        next = n;
      }

      public Node<E> next() {
        return next;
      }

      public E getData() {
        return data;
      }
    }

    private int size;
    private Node<T> head;

    public LinkedList()
    {
      head = new  Node<T>(null);
      size = 0;
    }

    public int size() {
      return size;
    }

    public T get(int index){
      return getNodeAtIndex(index).getData();
    }

    private Node<T> getNodeAtIndex(int index)
     {
         if (index < 0 || size() <= index) {
             throw new IndexOutOfBoundsException("No element exists at "
                     + index);
         }
         Node<T> current = head.next();
         for (int i = 0; i < index; i++) {
             current = current.next();
         }
         return current;
     }

    public void add(T newEntry)
    {
        Node<T> newNode = new Node<T>(newEntry);
        newNode.setNext(head.next());
        head.setNext(newNode);
        size++;
    }
    
    public boolean isEmpty() {
        return (size == 0);
    }
  }
